<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Developers | Gotchacode]]></title>
  <link href="http://gotchacode.com/blog/categories/developers/atom.xml" rel="self"/>
  <link href="http://gotchacode.com/"/>
  <updated>2014-05-01T14:15:58+05:30</updated>
  <id>http://gotchacode.com/</id>
  <author>
    <name><![CDATA[Vinit Kumar]]></name>
    <email><![CDATA[vinitcool76@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Talks and Videos That Could Make You a Better Developer]]></title>
    <link href="http://gotchacode.com/2013/06/talks-and-videos-that-could-make-you.html"/>
    <updated>2013-06-01T19:17:00+05:30</updated>
    <id>http://gotchacode.com/2013/06/talks-and-videos-that-could-make-you</id>
    <content type="html"><![CDATA[<div class="css-full-post-content js-full-post-content">
<div dir="ltr" style="text-align: left;" trbidi="on">Hey fellas, sorry for not actively blogging these months. But, I have some interesting stuff for you guys.<br /><br />Development is a complex process and it requires a lot of skill,&nbsp;hard work&nbsp;and techniques to be a really good developer. Recently, I &nbsp;came across a lot of good stuff and things are improving for me quite positively. I wanted to share the same with you.<br /><br />These are mostly talks, videos or presentation by some really popular, successful people from our industry. The tips they give are mostly an eye opener. Hope you enjoy them.<br /><br /><script async="" class="speakerdeck-embed" data-id="505376778282a900020560da" data-ratio="1.33333333333333" src="http://gotchacode.com//speakerdeck.com/assets/embed.js"></script> Also, here is another great presentation by the same guy.  <script async class="speakerdeck-embed" data-id="d3f56f007adf01307e7722000a9f0395" data-ratio="1.77777777777778" src="http://gotchacode.com//speakerdeck.com/assets/embed.js"></script><br /><br />The next talk is by Heroku co-founder Adam. This is single most awesome talk i have seen in recent times and is a must watch.<br /><br />&nbsp;   <iframe allowfullscreen="" frameborder="0" height="300" mozallowfullscreen="" src="http://player.vimeo.com/video/49701839" webkitallowfullscreen="" width="400"></iframe> I<br /><br />&nbsp;Hope you guys enjoy 'em and keep doing great work! </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Development Workflow for a Team]]></title>
    <link href="http://gotchacode.com/2013/03/modern-development-workflow-for-team.html"/>
    <updated>2013-03-06T12:55:00+05:30</updated>
    <id>http://gotchacode.com/2013/03/modern-development-workflow-for-team</id>
    <content type="html"><![CDATA[<div class="css-full-post-content js-full-post-content">
<div dir="ltr" style="text-align: left;" trbidi="on">Development is a complex process and it becomes more complex when many people are pushing code on a same codebase.<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-zgWrPP9y-1Y/UTc8xKggOHI/AAAAAAAABCI/kQV7RWOI7s0/s1600/Team+Development+Right.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="254" src="http://2.bp.blogspot.com/-zgWrPP9y-1Y/UTc8xKggOHI/AAAAAAAABCI/kQV7RWOI7s0/s320/Team+Development+Right.jpg" width="320" /></a></div><br /><br /><ul style="text-align: left;"><li>Ideally a development workflow should be asynchronous, so that one does his work and fixes the issues assigned to him and doesn't get stalled by his team member's progress.&nbsp;</li><li>In order to implement this, put up you more competent programmers to pair for a dependent modules such that that doesn't get stuck if one of the two programmer lag.&nbsp;</li><li>If two developers are working for different modules in a project, working on a DVCS such as Git is a great boon. Also, Github gives a great workflow with Issues and Pull Request. Issues and milestones are a great way to schedule you development such that there is no mistake in planning. You get set tag on the issues so that developer will know what is the high priority task, and plan accordingly.&nbsp;</li><li>Make sure your team members are competent if not experts with Git, it really helps if everyone uses git wisely. Private repos are handy as well when you are working on commercial stuff.</li><li>Using git-flow is a good choice. It truly brings sanity into the development workflow using Github and git.&nbsp;</li><li>Realtime chatting via Skype is also a good choice, developers could ask stuff from each other without breaking other's flow.&nbsp;</li><li>Also, make sure you people plan and discuss with each other before a days work and review at the end of day. One things is for sure, following this process will have you a more effective team.</li></ul><div>Thats's it folks. If you like the post follow me on twitter :&nbsp;<a href="http://twitter.com/vinitcool76" target="_blank">@vinitcool76</a></div><br /><br /></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup an Ideal Front End Development Stack in Ubuntu 12.04?]]></title>
    <link href="http://gotchacode.com/2012/12/how-to-setup-ideal-front-end.html"/>
    <updated>2012-12-21T17:07:00+05:30</updated>
    <id>http://gotchacode.com/2012/12/how-to-setup-ideal-front-end</id>
    <content type="html"><![CDATA[<div class="css-full-post-content js-full-post-content">
<div dir="ltr" style="text-align: left;" trbidi="on">Starting with Front-End Development and looking for a robust setup?<br /><br />Install Ubuntu 12.04 and&nbsp;here are some of the tools and tips that could come handy if you are configuring it for the first time. I am not detailing on how to install these tools but rather would suggest on what could be good setup for&nbsp;development..<br /><b><br /></b><b>IDE</b>: This is where you spend most of the time. So choose wisely among Sublime Text2, Vim or Emacs. Vim and Emacs are entirely customizable and comes with loads of plugin that would really improve your&nbsp;efficiency. Sublime text is an awesome code editor and you must try it first as it is highly effective and has a lower learning curve. Also there are loads of good plugins available that makes it a handy tool.<br /><div style="text-align: left;"><br /><b>Servers</b>: Install&nbsp;Apache 2,&nbsp;nginx and Node. This would cover most of the modern web server stack. Though node is technically not a server. But I hope you get my point.</div><div style="text-align: left;">Once Node and npm are installed there are some indispensable packages you must use. <b><i>UglifyJS </i></b>among others is a pretty handy one.&nbsp;Install<b><i> Compass </i></b>and <b><i>CoffeeScript</i></b>, also setup up <b><i>jslint/jshint</i></b> with your IDE. It will ensure a habit of shipping out quality code.<br /><br /><b>Browser<i>: Use the latest and nightly builds of Chromium/&nbsp;Firefox</i></b>, you should work with latest once so not miss any good feature/ improvements.</div><ul style="text-align: left;"><li>Install the <i style="font-weight: bold;">latest production release of Ruby, Python and Java, PHP </i>or whatever is your choice of language.&nbsp;</li><li>Learn<b><i> Version control </i></b>such as <b>git</b> and invest some time to learn it. It would save you tonnes of time later.</li><li>Last but not the least use<a href="http://www.blogger.com/%C2%A0http://yeoman.io/" target="_blank">&nbsp;yeoman</a>&nbsp;. It is really gem of a tool, it , it gives a robust set of tools , libraries and a workflow that most of top developers use. Invest sometime in learning and using it and you will be always glad that you did.&nbsp;</li></ul><br /><div style="text-align: left;"><br /></div><div style="text-align: left;">Installing each one them on Ubuntu 12.04 is easy and obviously it is free and freakishly stable. Configure once and worry about the important aspects of&nbsp;development.</div><div style="text-align: left;"><br /></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><br /></div></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are Some Awesome Platform as a Service Options for Developers]]></title>
    <link href="http://gotchacode.com/2012/10/what-are-some-awesome-platform-as.html"/>
    <updated>2012-10-30T13:23:00+05:30</updated>
    <id>http://gotchacode.com/2012/10/what-are-some-awesome-platform-as</id>
    <content type="html"><![CDATA[<div class="css-full-post-content js-full-post-content">
<div dir="ltr" style="text-align: left;" trbidi="on">If you are a developer, you must have felt the need to having a nice &nbsp;hosting platform &nbsp;where you can host your apps, &nbsp;do some testing and scaling. One can always buy a VPS hosting or an Amazon EC2 Instance but they cost money and need configuring/tuning them for optimum performance.<br /><br />Here are some three very cool and amazing services that are gaining a lot of traction.   <br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-T2mJSuXlqnU/UI_TGAkprdI/AAAAAAAAA3Y/ffL6titnGCA/s1600/screen7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="196" src="http://3.bp.blogspot.com/-T2mJSuXlqnU/UI_TGAkprdI/AAAAAAAAA3Y/ffL6titnGCA/s320/screen7.png" width="320" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-41NRVj5pVIo/UI_TIRXAVII/AAAAAAAAA3g/tsZNtKoZVQI/s1600/screen8.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="171" src="http://4.bp.blogspot.com/-41NRVj5pVIo/UI_TIRXAVII/AAAAAAAAA3g/tsZNtKoZVQI/s320/screen8.png" width="320" /></a></div><br /><br /><ul style="text-align: left;"><li><a href="http://openshift.redhat.com/" target="_blank">OpenShift:</a>&nbsp;&nbsp;Red Hat's free, auto-scaling Platform as a Service (PaaS) for applications.It is &nbsp;an application platform in the cloud,also manages the stack so you can focus on your code. It supports a variety of Languages just as Java, PHP, Python, Node.js and Perl. A Full list can be viewed <a href="https://openshift.redhat.com/app/console/application_types" rel="nofollow" target="_blank">&nbsp;here</a>. Though it is relatively new but since it belongs to Red Hat , credibility &nbsp;is always there.</li></ul><ul style="text-align: left;"><li><a href="http://www.heroku.com/" rel="nofollow" target="_blank">Heroku:</a> Heroku is also a Platform as a Service and also has a free tier, that could satisfy any developer who's sole purpose is hosting his new Web or Mobile App. Currently it supports Ruby, Python, Clojure, Scala, &nbsp;Node.js and Java, which i am sure will satisfy most of the developers appetite.&nbsp;</li></ul><ul style="text-align: left;"><li><a href="http://github.com/" rel="nofollow" target="_blank">Github :</a>&nbsp;GitHub has recently rolled out GitHub Pages and you can host any static site and also you can point a custom domain to it. &nbsp;It is pretty good for&nbsp;portfolio&nbsp;kind of sites and is really easy to setup.&nbsp;</li></ul><div><br /></div><div>One advantage and key feature in all of these platforms have in common is that all of them are based on Git and use it for Version Control and Deployment. Also these have quite competent hosting so you will rarely have to worry about&nbsp;up-time&nbsp;and scaling. Heroku has some very cool way to scale you application. These also have very decent documentation, so getting started with them is not very tough. If are clear and comfortable with Git , everything will be easy and enjoyable.</div><div><br /></div><div><br /></div></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What GNU/Linux Could Learn From Apple]]></title>
    <link href="http://gotchacode.com/2012/09/what-gnulinux-could-learn-from-apple.html"/>
    <updated>2012-09-02T08:01:00+05:30</updated>
    <id>http://gotchacode.com/2012/09/what-gnulinux-could-learn-from-apple</id>
    <content type="html"><![CDATA[<div class="css-full-post-content js-full-post-content">
<div dir="ltr" style="text-align: left;" trbidi="on">A lot of recent posts on Hacker News suggest that Linux is dead on Desktop and OS X killed it. Well I don't think that it is still dead or it will be ever.<br />Instead of Lamenting on it, we should learn from our mistakes and also from success of OS X. Here are some of things we could do:<br /><br /><b>User Interface</b>: This is one place where OS X beats Linux by huge margin, Apple hire the best graphic designers and they put a lot of effort on how it looks and how&nbsp;intuitive is feels. Linux really need to improve on the UI specially we need excellent graphic designers that can create the next gen graphics. We could also take a lesson from Androids, they look awesome and they have a Linux at the core. The problem of fragmentation can be get rid with a unified great looking Desktop Environment that is functional as well as beautiful. We could always have the choice of other DE, but there should be one that could cater of masses of people who just want there OS to work and don't have the technical aptitude to tweak it.<br /><br /><b>Softwares</b>: This is one place where we have a lead. The only problem is that we don't have as much third party developers developing for Linux. One way to fix that is that we could have a central Software center that could provides softwares for almost all the Linux Distributions. Package management system could be merged into one or we could have a same package management in addition to the other package manager specific to that distro.<br /><br /><br /><b>Stability</b>: This is one thing that really needs to be addressed very seriously. No user wants his OS to crash performing an update or release upgrade. These issues should be addressed from the smallest level and only stable kernels should be included. Also advanced filesystem such as ZFS or BRFTS should be included as soon as possible such that we do fast backups and full system rollback.<br /><br /><b>Focus on Developers</b>: OS X earned a huge advantage because it focused on developers and provided everything they need on a very stable environment. We need to beat them in that. We have all the tools , we just need to make it more organized and less painful. Any new release should make it their first priority to see that setting a &nbsp;development environment is as easy as clicking a button on software center or by a unified command that fetches all dependencies. They could be grouped as say Rails Development, Python Development, PHP Development. Surely we can trim these unified packages if we need. But a developer not used to Linux would like to start with his development as soon as possible without learning to mess with the Operating system."<b><i>Just Works</i></b>" is a important factor that we need to focus on<i>.<b>It is very crucial because these are the developer who will build third party apps and availability of these apps could only attract masses to adopt Linux.</b></i><br /><i><b><br /></b></i>We need to play on our strengths rather than trying to imitate Apple. They have their limits, We have freedom to choose, We can offer our OS for free, They can't. We can give away open source softwares for free, They cant do that.With the other Hardware manufactures catching up soon, Apple won't have a next gen leap with their hardware. Android devices have already proved it is possible.<br /><i><b><br /></b></i><i style="font-weight: bold;">Imagine an OS with a UI better than Macs, and free softwares in vast Apt Repositories(just an example..don't kill me for it). Stability and full drivers support. This could be </i><b>Linux </b><b><i>that could really be the </i>Desktop of the Year.&nbsp;</b><br /><b><br /></b><b>P.S Everyone who hates these ideas are welcome to suggest better ones, i am just suggesting ideas and I am sure there are better ones.&nbsp;</b><br /><b><br /></b><b><br /></b><br /><br /></div>
</div>

]]></content>
  </entry>
  
</feed>
